{"version":3,"sources":["utilities/validation.js","store/actions.js","store/GameManager.js","components/PlayerTableComponent.js","components/PlayerDataComponent.js","utilities/messages.js","components/MessageComponent.js","components/SettingsComponent.js","utilities/progressBarUtils.js","components/PlayerCardComponent.js","components/SummaryComponent.js","components/NavigationComponent.js","App.js","serviceWorker.js","index.js"],"names":["validateIntegerInput","points","isNaN","parseInt","actions","initialState","maxPoints","cardsPerRow","players","gameDataStore","createContext","Provider","GameManager","children","useReducer","state","action","type","data","removePlayer","id","addPointsToPlayer","clearPoints","clearData","Error","dispatch","value","playerId","filteredPlayersList","filter","player","index","array","playerData","PlayerTableComponent","useContext","useState","currentPoints","setCurrentPoints","Grid","celled","Row","Column","width","name","Statistic","Value","reduce","a","b","Label","Table","collapsing","textAlign","Header","map","key","HeaderCell","Body","length","Message","visible","Input","onChange","event","target","size","placeholder","labelPosition","label","Button","icon","primary","onClick","Icon","floated","PlayerDataComponent","gameData","playerName","setPlayerName","counter","setCounter","Fragment","color","trim","Segment","messages","text","MessageComponent","Transition","animation","duration","attached","SettingsComponent","currentMaxPoints","setCurrentMaxPoints","currentCardsPerRow","setCurrentCardsPerRow","alertMessage","setAlertMessage","as","block","Divider","setTimeout","raised","percentToColors","0","25","50","75","100","round","precision","multiplier","Math","pow","PlayerCardComponent","pointLimit","currentPercent","progressColor","percent","Object","keys","convertPercentToColor","console","log","toString","Card","Content","Description","Progress","total","SummaryComponent","CardGroup","itemsPerRow","panes","menuItem","pane","content","NavigationComponent","Tab","renderActiveOnly","App","className","Container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+WAAaA,EAAuB,SAACC,GACjC,OAAIC,MAAMD,IACHE,SAASF,IAAW,G,gBCFlBG,EACG,aADHA,EAEM,gBAFNA,EAGG,aAHHA,EAIQ,kBAJRA,EAKK,eALLA,EAMG,aCHVC,EAAe,CACjBC,UAAW,IACXC,YAAa,EACbC,QAAS,IAEPC,EAAgBC,wBAAcL,GAC7BM,EAAYF,EAAZE,SAEDC,EAAc,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAAc,EACNC,sBAAW,SAACC,EAAOC,GACzC,OAAQA,EAAOC,MACX,KAAKb,EACD,OAAO,2BAAIW,GAAX,IAAkBP,QAAQ,GAAD,mBAAMO,EAAMP,SAAZ,CAAqBQ,EAAOE,SACzD,KAAKd,EACD,OAAOe,EAAaJ,EAAOC,EAAOE,KAAKE,IAC3C,KAAKhB,EACD,OAAOiB,EAAkBN,EAAOC,EAAOE,MAC3C,KAAKd,EACD,OAAO,2BAAIW,GAAX,IAAkBR,YAAaS,EAAOE,KAAKX,YAAaD,UAAWU,EAAOE,KAAKZ,YACnF,KAAKF,EACD,OAAOkB,EAAYP,GACvB,KAAKX,EACD,OAAOmB,EAAUR,GACrB,QACI,MAAM,IAAIS,MAAJ,oEAAuER,EAAOC,UAE7FZ,GAlB6B,mBACzBU,EADyB,KAClBU,EADkB,KAoBhC,OAAO,kBAACd,EAAD,CAAUe,MAAO,CAACX,QAAOU,aAAYZ,IAG1CM,EAAe,SAACJ,EAAOY,GAAc,IAEnCC,EADYb,EAAXP,QAC6BqB,QAAO,SAACC,EAAQC,EAAOC,GACrD,OAAOF,EAAOV,KAAOO,KAGzB,OAAO,2BAAIZ,GAAX,IAAkBP,QAASoB,KAGzBP,EAAoB,SAACN,EAAOkB,GAAgB,IAAD,EACtCb,EAAca,EAAdb,GAAInB,EAAUgC,EAAVhC,OACNO,EAAWO,EAAXP,QAFwC,cAI1BA,GAJ0B,IAI7C,2BAA4B,CAAC,IAApBsB,EAAmB,QACpBA,EAAOV,KAAOA,IACdU,EAAO7B,OAASA,IANqB,8BAU7C,OAAO,2BAAIc,GAAX,IAAkBP,QAASA,KAGzBc,EAAc,SAACP,GAAW,IAAD,EACtBP,EAAWO,EAAXP,QADsB,cAGRA,GAHQ,IAG3B,2BAA4B,SACjBP,OAAS,IAJO,8BAO3B,OAAO,2BAAIc,GAAX,IAAkBP,QAASA,KAGzBe,EAAY,SAACR,GACf,OAAOV,GCyBI6B,EArFc,SAAC,GAAkB,IAAjBD,EAAgB,EAAhBA,WAGpBR,EADUU,qBAAW1B,GACrBgB,SAHoC,EAKDW,mBAAS,IALR,mBAKpCC,EALoC,KAKrBC,EALqB,KA4B3C,OACI,kBAACC,EAAA,EAAD,CAAMC,QAAM,GACR,kBAACD,EAAA,EAAKE,IAAN,KACI,kBAACF,EAAA,EAAKG,OAAN,CAAaC,MAAO,GAChB,4BAAKV,EAAWW,MAChB,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAUC,MAAX,KAAkBb,EAAWhC,OAAO8C,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,IAC5D,kBAACJ,EAAA,EAAUK,MAAX,iBAGR,kBAACX,EAAA,EAAKG,OAAN,CAAaC,MAAO,IAChB,kBAACQ,EAAA,EAAD,CAAOX,QAAM,EAACY,YAAU,EAACC,UAAU,UAC/B,kBAACF,EAAA,EAAMG,OAAP,KACI,kBAACH,EAAA,EAAMV,IAAP,KACKR,EAAWhC,OAAOsD,KAAI,SAAC7B,EAAO8B,GAC3B,OACI,kBAACL,EAAA,EAAMM,WAAP,CAAkBD,IAAKA,GAAMA,EAAM,QAKnD,kBAACL,EAAA,EAAMO,KAAP,KACI,kBAACP,EAAA,EAAMV,IAAP,KACKR,EAAWhC,OAAOsD,KAAI,SAAC7B,EAAO8B,GAC3B,OACI,kBAACL,EAAA,EAAMM,WAAP,CAAkBD,IAAKA,GAAM9B,SAMnB,IAA7BO,EAAWhC,OAAO0D,OAAe,kBAACC,EAAA,EAAD,CAASC,SAAO,GAAhB,gCAA0D,KAC5F,kBAACC,EAAA,EAAD,CACIC,SAAU,SAACC,GACP1B,EAAiB0B,EAAMC,OAAOvC,QAElCA,MAAOW,EACP6B,KAAM,OACNC,YAAY,gBACZC,cAAc,QACdC,MAAO,kBAACC,EAAA,EAAD,CAAQC,MAAI,EACJC,SAAO,EACPC,QA/DT,WAElBzE,EAAqBqC,KACrBZ,EAAS,CACLR,KAAMb,EACNc,KAAM,CACFE,GAAIa,EAAWb,GACfnB,OAAO,GAAD,mBAAMgC,EAAWhC,QAAjB,CAAyBE,SAASkC,QAGhDC,EAAiB,OAsDD,kBAACoC,EAAA,EAAD,CAAM9B,KAAK,WAGnB,6BACI,kBAAC0B,EAAA,EAAD,CAAQC,MAAI,EAACI,QAAS,QAASF,QAtD9B,WACjBhD,EAAS,CACLR,KAAMb,EACNc,KAAM,CAACE,GAAIa,EAAWb,QAoDN,kBAACsD,EAAA,EAAD,CAAM9B,KAAM,gBChBzBgC,EA5Da,WAExB,IAAMC,EAAW1C,qBAAW1B,GACrBgB,EAAYoD,EAAZpD,SAHuB,EAKMW,mBAAS,IALf,mBAKvB0C,EALuB,KAKXC,EALW,OAMA3C,mBAASyC,EAAS9D,MAAMP,QAAQmD,QANhC,mBAMvBqB,EANuB,KAMdC,EANc,KAwC9B,OAAO,kBAAC,IAAMC,SAAP,KACH,kBAACpB,EAAA,EAAD,CACIC,SAAU,SAACC,GACPe,EAAcf,EAAMC,OAAOvC,QAE/BA,MAAOoD,EACPT,MAAO,kBAACC,EAAA,EAAD,CAAQC,MAAI,EACJY,MAAO,QACPV,QAxCL,WAEQK,EJXbM,OAAOzB,OAAS,IIYrBlC,EAAS,CACLR,KAAMb,EACNc,KAAM,CAAC,GAAM8D,EAAS,KAAQF,EAAY,OAAU,MAExDG,EAAWD,EAAU,GACrBD,EAAc,OAiCV,kBAACL,EAAA,EAAD,CAAM9B,KAAK,SAEfwB,cAAc,QACdD,YAAY,kBAGfU,EAAS9D,MAAMP,QAAQmD,OAAS,EAvB7BkB,EAAS9D,MAAMP,QAAQ+C,KAAI,SAACtB,EAAYuB,GACpC,OACI,kBAAC,EAAD,CAAsBA,IAAKA,EAAKvB,WAAYA,OAZxD,kBAACoD,EAAA,EAAD,CAASlB,aAAW,GAChB,kBAACb,EAAA,EAAD,CAAQiB,MAAI,GACR,kBAACG,EAAA,EAAD,CAAM9B,KAAK,SADf,sC,SC9BC0C,EACO,CACZrE,KAAM,UACNsE,KAAM,gDAHDD,EAKc,CACnBrE,KAAM,QACNsE,KAAM,4C,SCJDC,EAAmB,SAAC,GAAkB,IAKvCL,EAAOZ,EALetD,EAAgB,EAAhBA,KAAMsE,EAAU,EAAVA,KAEpC,GAAa,KAATA,EACA,OAAO,KAGP,OAAQtE,GACJ,IAAK,QACDkE,EAAQ,MACRZ,EAAO,uBACP,MACJ,IAAK,UACDY,EAAQ,QACRZ,EAAO,QACP,MACJ,QACIY,EAAQ,OACRZ,EAAO,OAGf,OACI,kBAACkB,EAAA,EAAD,CAAYC,UAAW,OAAQC,SAAU,KACrC,kBAAC/B,EAAA,EAAD,CAASgC,UAAQ,EAACT,MAAOA,GACrB,kBAACT,EAAA,EAAD,CAAM9B,KAAM2B,IACXgB,KCyENM,EA5FW,WAEtB,IAAMhB,EAAW1C,qBAAW1B,GACrBgB,EAAYoD,EAAZpD,SAHqB,EAKKoD,EAAS9D,MAAnCT,EALqB,EAKrBA,UAAWC,EALU,EAKVA,YALU,EAMoB6B,mBAAS9B,GAN7B,mBAMrBwF,EANqB,KAMHC,EANG,OAOwB3D,mBAAS7B,GAPjC,mBAOrByF,EAPqB,KAODC,EAPC,OAQY7D,mBAAS,CAACnB,KAAM,GAAIsE,KAAM,KARtC,mBAQrBW,EARqB,KAQPC,EARO,KAyC5B,OACI,kBAAC,IAAMjB,SAAP,KACI,kBAAC5B,EAAA,EAAD,CAAQ8C,GAAG,KAAKR,SAAS,MAAMS,OAAK,GAApC,YAGA,kBAAC,EAAD,CAAkBpF,KAAMiF,EAAajF,KAAMsE,KAAMW,EAAaX,OAC9D,kBAACF,EAAA,EAAD,CAASO,UAAQ,GACb,+DACA,kBAAC9B,EAAA,EAAD,CAAO7C,KAAM,OACNoD,MAAO,aACP3C,MAAOoE,EACP/B,SAAU,SAACC,GACP+B,EAAoB/B,EAAMC,OAAOvC,UAG5C,kBAAC4E,EAAA,EAAD,MACA,2GACA,kBAACxC,EAAA,EAAD,CAAO7C,KAAM,OACNoD,MAAO,gBACP3C,MAAOsE,EACPjC,SAAU,SAACC,GACPiC,EAAsBjC,EAAMC,OAAOvC,UAG9C,kBAAC4E,EAAA,EAAD,MACA,kBAAChC,EAAA,EAAD,CAAQC,MAAI,EACJY,MAAO,OACPf,cAAe,OACfK,QA3DS,WACrBzE,EAAqB8F,IAAqB9F,EAAqBgG,IAC/DvE,EAAS,CACLR,KAAMb,EACNc,KAAM,CACFX,YAAaJ,SAAS6F,GACtB1F,UAAWH,SAAS2F,MAG5BK,EAAgBb,IAEhBa,EAAgBb,GAGpBiB,YAAW,WACPJ,EAAgB,CAAClF,KAAM,GAAIsE,KAAM,OAClC,OA4CS,kBAACb,EAAA,EAAD,CAAM9B,KAAK,UAJf,kBAQJ,kBAACyC,EAAA,EAAD,CAASmB,QAAM,EAACrB,MAAO,UACnB,oFACA,kBAACb,EAAA,EAAD,CAAQC,MAAI,EAACY,MAAM,SAASf,cAAc,OAAOK,QA/CnC,WACtBhD,EAAS,CACLR,KAAMb,MA8CE,kBAACsE,EAAA,EAAD,CAAM9B,KAAK,UADf,iBAKJ,kBAACyC,EAAA,EAAD,CAASmB,QAAM,EAACrB,MAAO,OACnB,+FACA,kBAACb,EAAA,EAAD,CAAQC,MAAI,EAACY,MAAM,MAAMf,cAAc,OAAOK,QAhDlC,WACpBhD,EAAS,CACLR,KAAMb,MA+CE,kBAACsE,EAAA,EAAD,CAAM9B,KAAK,UADf,qB,kBC3FV6D,EAAkB,CACpBC,EAAG,QACHC,GAAI,QACJC,GAAI,SACJC,GAAI,SACJC,IAAK,OAeIC,EAAQ,SAACrF,EAAOsF,GACzB,IAAIC,EAAaC,KAAKC,IAAI,GAAIH,GAAa,GAC3C,OAAOE,KAAKH,MAAMrF,EAAQuF,GAAcA,GCQ7BG,EA1Ba,SAAC,GAA8B,IAA7BnF,EAA4B,EAA5BA,WAAYoF,EAAgB,EAAhBA,WAEhChF,EAAgBJ,EAAWhC,OAAO8C,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,GAC1DqE,EAAkBjF,EAAgBgF,EAAc,IAClDE,EDA6B,SAACC,GAElC,IADA,IAAID,EAAgB,QACpB,MAAgBE,OAAOC,KAAKjB,GAA5B,eAA8C,CAAzC,IAAIjD,EAAG,KACJgE,EAAUhE,IACV+D,EAAgBd,EAAgBjD,IAIxC,OAAO+D,ECRaI,CAAsBL,GAI1C,OAFAM,QAAQC,IAAId,EAAMO,EAAgB,GAAGQ,YAGjC,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,QAAN,KACI,kBAACD,EAAA,EAAKzE,OAAN,KAAcrB,EAAWW,MACzB,kBAACC,EAAA,EAAD,CAAWwB,MAAM,SAAS3C,MAAOO,EAAWhC,OAAO8C,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,KAC3E,kBAAC8E,EAAA,EAAKE,YAAN,KACI,kBAACC,EAAA,EAAD,CACI/C,MAAOoC,EACPlD,MAAO0C,EAAMO,EAAgB,GAAK,IAClC5F,MAAOW,EACP8F,MAAOd,Q,SCEhBe,EAnBU,WAErB,IAAMvD,EAAW1C,qBAAW1B,GAE5B,OACI,kBAAC4H,EAAA,EAAD,CAAWC,YAAazD,EAAS9D,MAAMR,aAClCsE,EAAS9D,MAAMP,QAAQ+C,KAAI,SAACtB,EAAYuB,GACrC,OACI,kBAAC,EAAD,CACIA,IAAKA,EACLvB,WAAYA,EACZoF,WAAYxC,EAAS9D,MAAMT,iBCT7CiI,EAAQ,CACV,CAACC,SAAU,UAAWC,KAAM,CAACC,QAAS,kBAAC,EAAD,QACtC,CAACF,SAAU,cAAeC,KAAM,CAACC,QAAS,kBAAC,EAAD,QAC1C,CAACF,SAAU,WAAYC,KAAM,CAACC,QAAS,kBAAC,EAAD,SAS5BC,EANa,kBACxB,kBAACC,EAAA,EAAD,CACIL,MAAOA,EACPM,kBAAkB,KCAXC,OAXf,WACI,OACI,yBAAKC,UAAU,OACX,kBAACC,EAAA,EAAD,KACI,kBAAC1F,EAAA,EAAD,CAAQ8C,GAAG,MAAX,iBACA,kBAAC,EAAD,SCEI6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,KACI,kBAAC,GAAD,QAGRC,SAASC,eAAe,SDsHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtC,QAAQsC,MAAMA,EAAMC,c","file":"static/js/main.a2081cc1.chunk.js","sourcesContent":["export const validateIntegerInput = (points) => {\n    if (isNaN(points)) return false;\n    return parseInt(points) >= 0\n};\n\nexport const validateNameInput = (name) => {\n    return (name.trim().length > 2);\n};","export const actions = {\n    ADD_PLAYER: \"ADD_PLAYER\",\n    REMOVE_PLAYER: \"REMOVE_PLAYER\",\n    ADD_POINTS: \"ADD_POINTS\",\n    UPDATE_SETTINGS: \"UPDATE_SETTINGS\",\n    CLEAR_POINTS: \"CLEAR_POINTS\",\n    CLEAR_DATA: \"CLEAR_DATA\"\n};","import React, {createContext, useReducer} from 'react';\nimport {actions} from \"./actions\";\n\nconst initialState = {\n    maxPoints: 500,\n    cardsPerRow: 2,\n    players: []\n};\nconst gameDataStore = createContext(initialState);\nconst {Provider} = gameDataStore;\n\nconst GameManager = ({children}) => {\n    const [state, dispatch] = useReducer((state, action) => {\n        switch (action.type) {\n            case actions.ADD_PLAYER:\n                return {...state, players: [...state.players, action.data]};\n            case actions.REMOVE_PLAYER:\n                return removePlayer(state, action.data.id);\n            case actions.ADD_POINTS:\n                return addPointsToPlayer(state, action.data);\n            case actions.UPDATE_SETTINGS:\n                return {...state, cardsPerRow: action.data.cardsPerRow, maxPoints: action.data.maxPoints};\n            case actions.CLEAR_POINTS:\n                return clearPoints(state);\n            case actions.CLEAR_DATA:\n                return clearData(state);\n            default:\n                throw new Error(`The GameManager doesn't know what to do with this action: ${action.type}`);\n        }\n    }, initialState);\n\n    return <Provider value={{state, dispatch}}>{children}</Provider>;\n};\n\nconst removePlayer = (state, playerId) => {\n    let {players} = state;\n    let filteredPlayersList = players.filter((player, index, array) => {\n        return player.id !== playerId\n    });\n\n    return {...state, players: filteredPlayersList}\n};\n\nconst addPointsToPlayer = (state, playerData) => {\n    const {id, points} = playerData;\n    let {players} = state;\n\n    for (let player of players) {\n        if (player.id === id) {\n            player.points = points;\n        }\n    }\n\n    return {...state, players: players};\n};\n\nconst clearPoints = (state) => {\n    let {players} = state;\n\n    for (let player of players) {\n        player.points = []\n    }\n\n    return {...state, players: players}\n};\n\nconst clearData = (state) => {\n    return initialState\n};\n\nexport {gameDataStore, GameManager}","import React, {useContext, useState} from 'react';\nimport {Button, Grid, Icon, Input, Message, Statistic, Table} from \"semantic-ui-react\";\nimport {validateIntegerInput} from \"../utilities/validation\";\nimport {gameDataStore} from \"../store/GameManager\";\nimport {actions} from \"../store/actions\";\n\n\nconst PlayerTableComponent = ({playerData}) => {\n\n    const gameData = useContext(gameDataStore);\n    const {dispatch} = gameData;\n\n    const [currentPoints, setCurrentPoints] = useState(\"\");\n\n    const addPointsToPlayer = () => {\n\n        if (validateIntegerInput(currentPoints)) {\n            dispatch({\n                type: actions.ADD_POINTS,\n                data: {\n                    id: playerData.id,\n                    points: [...playerData.points, parseInt(currentPoints)]\n                }\n            });\n            setCurrentPoints(\"\")\n        }\n    };\n\n    const removePlayer = () => {\n        dispatch({\n            type: actions.REMOVE_PLAYER,\n            data: {id: playerData.id}\n        });\n    };\n\n    return (\n        <Grid celled>\n            <Grid.Row>\n                <Grid.Column width={3}>\n                    <h2>{playerData.name}</h2>\n                    <Statistic>\n                        <Statistic.Value>{playerData.points.reduce((a, b) => a + b, 0)}</Statistic.Value>\n                        <Statistic.Label>Points</Statistic.Label>\n                    </Statistic>\n                </Grid.Column>\n                <Grid.Column width={13}>\n                    <Table celled collapsing textAlign=\"center\">\n                        <Table.Header>\n                            <Table.Row>\n                                {playerData.points.map((value, key) => {\n                                    return (\n                                        <Table.HeaderCell key={key}>{key + 1}</Table.HeaderCell>\n                                    )\n                                })}\n                            </Table.Row>\n                        </Table.Header>\n                        <Table.Body>\n                            <Table.Row>\n                                {playerData.points.map((value, key) => {\n                                    return (\n                                        <Table.HeaderCell key={key}>{value}</Table.HeaderCell>\n                                    )\n                                })}\n                            </Table.Row>\n                        </Table.Body>\n                    </Table>\n                    {playerData.points.length === 0 ? <Message visible>points will be shown here...</Message> : null}\n                    <Input\n                        onChange={(event) => {\n                            setCurrentPoints(event.target.value)\n                        }}\n                        value={currentPoints}\n                        size={\"mini\"}\n                        placeholder='add points...'\n                        labelPosition='right'\n                        label={<Button icon\n                                       primary\n                                       onClick={addPointsToPlayer}>\n                            <Icon name='add'/>\n                        </Button>}\n                    />\n                    <div>\n                        <Button icon floated={\"right\"} onClick={removePlayer}>\n                            <Icon name={\"trash\"}/>\n                        </Button>\n                    </div>\n                </Grid.Column>\n            </Grid.Row>\n        </Grid>\n    )\n};\n\nexport default PlayerTableComponent\n","import React, {useContext, useState} from \"react\";\nimport {Button, Header, Icon, Input, Segment} from \"semantic-ui-react\";\nimport PlayerTableComponent from \"./PlayerTableComponent\";\nimport {gameDataStore} from \"../store/GameManager\";\nimport {actions} from \"../store/actions\";\nimport {validateNameInput} from \"../utilities/validation\";\n\nconst PlayerDataComponent = () => {\n\n    const gameData = useContext(gameDataStore);\n    const {dispatch} = gameData;\n\n    const [playerName, setPlayerName] = useState(\"\");\n    const [counter, setCounter] = useState(gameData.state.players.length);\n\n    const addPlayer = () => {\n\n        if (validateNameInput(playerName)) {\n            dispatch({\n                type: actions.ADD_PLAYER,\n                data: {\"id\": counter, \"name\": playerName, \"points\": []}\n            });\n            setCounter(counter + 1);\n            setPlayerName(\"\");\n        }\n        // do alert stuff here\n    };\n\n    const renderPlaceHolderSegment = () => (\n        <Segment placeholder>\n            <Header icon>\n                <Icon name='user'/>\n                No players have been added yet.\n            </Header>\n        </Segment>\n    );\n\n    const renderPlayerComponents = () => {\n        return (\n            gameData.state.players.map((playerData, key) => {\n                return (\n                    <PlayerTableComponent key={key} playerData={playerData}/>\n                )\n            })\n        )\n    };\n\n    return <React.Fragment>\n        <Input\n            onChange={(event) => {\n                setPlayerName(event.target.value)\n            }}\n            value={playerName}\n            label={<Button icon\n                           color={\"green\"}\n                           onClick={addPlayer}>\n                <Icon name='add'/>\n            </Button>}\n            labelPosition='right'\n            placeholder='add player...'\n        />\n\n        {gameData.state.players.length > 0 ? renderPlayerComponents() : renderPlaceHolderSegment()}\n\n    </React.Fragment>\n};\n\nexport default PlayerDataComponent;","export const messages = {\n    changesSuccess: {\n        type: \"success\",\n        text: \"Your changes have been applied successfully.\"\n    },\n    numberValidationError: {\n        type: \"error\",\n        text: \"The values can be positive numbers only!\"\n    }\n};","import {Icon, Message, Transition} from \"semantic-ui-react\";\nimport React from \"react\";\n\nexport const MessageComponent = ({type, text}) => {\n\n    if (text === \"\") {\n        return null;\n    } else {\n        let color, icon;\n        switch (type) {\n            case \"error\":\n                color = \"red\";\n                icon = \"exclamation triangle\";\n                break;\n            case \"success\":\n                color = \"green\";\n                icon = \"check\";\n                break;\n            default:\n                color = \"blue\";\n                icon = \"info\";\n        }\n\n        return (\n            <Transition animation={\"fade\"} duration={750}>\n                <Message attached color={color}>\n                    <Icon name={icon}/>\n                    {text}\n                </Message>\n            </Transition>\n        )\n    }\n};","import React, {useContext, useState} from \"react\";\nimport {Button, Divider, Header, Icon, Input, Segment} from \"semantic-ui-react\";\nimport {gameDataStore} from \"../store/GameManager\";\nimport {validateIntegerInput, validateNameInput} from \"../utilities/validation\";\nimport {actions} from \"../store/actions\";\nimport {messages} from \"../utilities/messages\";\nimport {MessageComponent} from \"./MessageComponent\";\n\nconst SettingsComponent = () => {\n\n    const gameData = useContext(gameDataStore);\n    const {dispatch} = gameData;\n\n    const {maxPoints, cardsPerRow} = gameData.state;\n    const [currentMaxPoints, setCurrentMaxPoints] = useState(maxPoints);\n    const [currentCardsPerRow, setCurrentCardsPerRow] = useState(cardsPerRow);\n    const [alertMessage, setAlertMessage] = useState({type: \"\", text: \"\"});\n\n    const updateSettingsAction = () => {\n        if (validateIntegerInput(currentMaxPoints) && validateIntegerInput(currentCardsPerRow)) {\n            dispatch({\n                type: actions.UPDATE_SETTINGS,\n                data: {\n                    cardsPerRow: parseInt(currentCardsPerRow),\n                    maxPoints: parseInt(currentMaxPoints)\n                }\n            });\n            setAlertMessage(messages.changesSuccess)\n        } else {\n            setAlertMessage(messages.numberValidationError)\n        }\n\n        setTimeout(() => {\n            setAlertMessage({type: \"\", text: \"\"})\n        }, 3000)\n    };\n\n    const clearPointsAction = () => {\n        dispatch({\n            type: actions.CLEAR_POINTS\n        })\n    };\n\n    const clearDataAction = () => {\n        dispatch({\n            type: actions.CLEAR_DATA\n        })\n    };\n\n    return (\n        <React.Fragment>\n            <Header as='h4' attached='top' block>\n                Settings\n            </Header>\n            <MessageComponent type={alertMessage.type} text={alertMessage.text}/>\n            <Segment attached>\n                <p>Affects how long the games last.</p>\n                <Input type={\"text\"}\n                       label={\"Max Points\"}\n                       value={currentMaxPoints}\n                       onChange={(event) => {\n                           setCurrentMaxPoints(event.target.value)\n                       }}>\n                </Input>\n                <Divider/>\n                <p>Controls how many cards should be shown in a single row on the summary page.</p>\n                <Input type={\"text\"}\n                       label={\"Cards Per Row\"}\n                       value={currentCardsPerRow}\n                       onChange={(event) => {\n                           setCurrentCardsPerRow(event.target.value)\n                       }}>\n                </Input>\n                <Divider/>\n                <Button icon\n                        color={\"blue\"}\n                        labelPosition={\"left\"}\n                        onClick={updateSettingsAction}>\n                    <Icon name=\"check\"/>\n                    Apply Changes\n                </Button>\n            </Segment>\n            <Segment raised color={\"orange\"}>\n                <p>Clears points for all players. This cannot be undone!</p>\n                <Button icon color=\"orange\" labelPosition='left' onClick={clearPointsAction}>\n                    <Icon name='trash'/>\n                    Clear points\n                </Button>\n            </Segment>\n            <Segment raised color={\"red\"}>\n                <p>Clears all data from the current session. This cannot be undone!</p>\n                <Button icon color=\"red\" labelPosition='left' onClick={clearDataAction}>\n                    <Icon name='trash'/>\n                    Clear all data\n                </Button>\n            </Segment>\n        </React.Fragment>\n    )\n};\n\nexport default SettingsComponent","const percentToColors = {\n    0: \"green\",\n    25: \"olive\",\n    50: \"yellow\",\n    75: \"orange\",\n    100: \"red\"\n};\n\nexport const convertPercentToColor = (percent) => {\n    let progressColor = \"green\";\n    for (let key of Object.keys(percentToColors)) {\n        if (percent > key) {\n            progressColor = percentToColors[key];\n        }\n    }\n\n    return progressColor;\n};\n\n\nexport const round = (value, precision) => {\n    var multiplier = Math.pow(10, precision || 0);\n    return Math.round(value * multiplier) / multiplier;\n};\n\n","import React from \"react\";\nimport {Card, Progress, Statistic} from \"semantic-ui-react\";\nimport {convertPercentToColor, round} from \"../utilities/progressBarUtils\";\n\nconst PlayerCardComponent = ({playerData, pointLimit}) => {\n\n    const currentPoints = playerData.points.reduce((a, b) => a + b, 0);\n    const currentPercent = (currentPoints / pointLimit) * 100;\n    let progressColor = convertPercentToColor(currentPercent);\n\n    console.log(round(currentPercent, 4).toString());\n\n    return (\n        <Card>\n            <Card.Content>\n                <Card.Header>{playerData.name}</Card.Header>\n                <Statistic label='points' value={playerData.points.reduce((a, b) => a + b, 0)}/>\n                <Card.Description>\n                    <Progress\n                        color={progressColor}\n                        label={round(currentPercent, 1) + '%'}\n                        value={currentPoints}\n                        total={pointLimit}\n                    />\n                </Card.Description>\n            </Card.Content>\n        </Card>\n    )\n};\n\nexport default PlayerCardComponent","import React, {useContext} from 'react';\nimport PlayerCardComponent from \"./PlayerCardComponent\";\nimport {CardGroup} from \"semantic-ui-react\";\nimport {gameDataStore} from \"../store/GameManager\";\n\nconst SummaryComponent = () => {\n\n    const gameData = useContext(gameDataStore);\n\n    return (\n        <CardGroup itemsPerRow={gameData.state.cardsPerRow}>\n            {gameData.state.players.map((playerData, key) => {\n                return (\n                    <PlayerCardComponent\n                        key={key}\n                        playerData={playerData}\n                        pointLimit={gameData.state.maxPoints}\n                    />\n                )\n            })}\n        </CardGroup>\n    )\n};\n\nexport default SummaryComponent","import React from 'react'\nimport {Tab} from 'semantic-ui-react'\n\nimport PlayerDataComponent from \"./PlayerDataComponent\";\nimport SettingsComponent from \"./SettingsComponent\";\nimport SummaryComponent from \"./SummaryComponent\";\n\nconst panes = [\n    {menuItem: 'Summary', pane: {content: <SummaryComponent/>}},\n    {menuItem: 'Player Data', pane: {content: <PlayerDataComponent/>}},\n    {menuItem: 'Settings', pane: {content: <SettingsComponent/>}},\n];\n\nconst NavigationComponent = () =>\n    <Tab\n        panes={panes}\n        renderActiveOnly={false}\n    />;\n\nexport default NavigationComponent","import React from 'react';\nimport './App.css';\nimport {Container, Header} from \"semantic-ui-react\";\nimport NavigationComponent from \"./components/NavigationComponent\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Container>\n                <Header as='h2'>UNO Score App</Header>\n                <NavigationComponent/>\n            </Container>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {GameManager} from \"./store/GameManager\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <GameManager>\n            <App/>\n        </GameManager>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}