{"version":3,"sources":["store/actions.js","store/gameManagerReducer.js","store/userInterfaceReducer.js","store/rootReducer.js","store/configureStore.js","material/components/modal/ResultReportComponent.js","material/components/modal/DataModalComponent.js","material/components/CircularProgressComponent.js","material/components/PointsChipComponent.js","material/components/PlayerCardComponent.js","material/components/ScoreApp.js","App.js","serviceWorker.js","index.js"],"names":["actions","initialState","maxPoints","players","removePlayer","state","playerId","filteredPlayersList","filter","player","id","renamePlayer","playerData","name","addPointsToPlayer","points","updatePoints","roundResults","console","log","push","parseInt","clearPoints","clearData","isModalOpen","rootReducer","combineReducers","gameData","action","type","data","cardsPerRow","userInterface","middleware","thunk","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","useStyles","makeStyles","gridItem","display","alignItems","winnerSelectButton","margin","ResultReportComponent","classes","dispatch","useDispatch","useSelector","useState","isFormPristine","setIsFormPristine","isFormValid","setIsFormValid","selected","setSelected","formState","setFormState","closeModal","useEffect","Object","keys","length","Fragment","container","direction","spacing","map","key","item","xs","root","TextField","variant","label","InputLabelProps","shrink","disabled","onBlur","event","target","value","Tooltip","title","Typography","ToggleButton","className","onChange","DialogActions","color","onClick","Transition","React","forwardRef","props","ref","Slide","DataModalComponent","uiState","Dialog","open","TransitionComponent","disableBackdropClick","aria-labelledby","DialogTitle","DialogContent","box","position","text","top","left","transform","CircularProgressComponent","percent","Box","CircularProgress","size","PointsChipComponent","Chip","padding","textAlign","marginBottom","deleteButton","justifyContent","PlayerCardComponent","currentPoints","reduce","a","b","pointLimit","isEditingName","setIsEditingName","sm","md","Paper","elevation","newName","point","IconButton","aria-label","fontSize","fabBox","bottom","right","fabButton","ScoreApp","counter","setCounter","justify","Fab","store","createStore","applyMiddleware","theme","createMuiTheme","palette","MaterialApp","ThemeProvider","CssBaseline","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4fba39c4.chunk.js","sourcesContent":["export const actions = {\n    ADD_PLAYER: \"ADD_PLAYER\",\n    REMOVE_PLAYER: \"REMOVE_PLAYER\",\n    ADD_POINTS: \"ADD_POINTS\",\n    UPDATE_SETTINGS: \"UPDATE_SETTINGS\",\n    CLEAR_POINTS: \"CLEAR_POINTS\",\n    CLEAR_DATA: \"CLEAR_DATA\",\n    OPEN_MODAL: \"OPEN_MODAL\",\n    CLOSE_MODAL: \"CLOSE_MODAL\",\n    UPDATE_POINTS: \"UPDATE_POINTS\",\n    RENAME_PLAYER: \"RENAME_PLAYER\"\n};","import {actions} from \"store/actions\";\n\nconst initialState = {\n    maxPoints: 500,\n    players: [],\n};\n\nexport const gameManagerReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actions.ADD_PLAYER:\n            return {...state, players: [...state.players, action.data]};\n        case actions.REMOVE_PLAYER:\n            return removePlayer(state, action.data.id);\n        case actions.ADD_POINTS:\n            return addPointsToPlayer(state, action.data);\n        case actions.UPDATE_POINTS:\n            return updatePoints(state, action.data.roundResults);\n        case actions.RENAME_PLAYER:\n            return renamePlayer(state, action.data);\n        case actions.UPDATE_SETTINGS:\n            return {...state, cardsPerRow: action.data.cardsPerRow, maxPoints: action.data.maxPoints};\n        case actions.CLEAR_POINTS:\n            return clearPoints(state);\n        case actions.CLEAR_DATA:\n            return clearData(state);\n        default:\n            return state;\n    }\n};\n\nconst removePlayer = (state, playerId) => {\n    let {players} = state;\n    let filteredPlayersList = players.filter((player) => {\n        return player.id !== playerId\n    });\n\n    return {...state, players: filteredPlayersList}\n};\n\nconst renamePlayer = (state, playerData) => {\n    const {id, name} = playerData;\n    let {players} = state;\n\n    for (let player of players) {\n        if (player.id === id) {\n            player.name = name;\n        }\n    }\n\n    return {...state, players: players};\n}\n\nconst addPointsToPlayer = (state, playerData) => {\n    const {id, points} = playerData;\n    let {players} = state;\n\n    for (let player of players) {\n        if (player.id === id) {\n            player.points = points;\n        }\n    }\n\n    return {...state, players: players};\n};\n\nconst updatePoints = (state, roundResults) => {\n    console.log(roundResults);\n    let {players} = state;\n    \n    for (let player of players) {\n        player.points.push(parseInt(roundResults[player.id]) || null);    \n    }\n    \n    return {...state, players: players};\n}\n\nconst clearPoints = (state) => {\n    let {players} = state;\n\n    for (let player of players) {\n        player.points = []\n    }\n\n    return {...state, players: players}\n};\n\nconst clearData = (state) => {\n    return {...state, players: []}\n};\n","import {actions} from \"store/actions\";\n\nconst initialState = {\n    isModalOpen: false\n};\n\nexport const userInterfaceReducer = (state = initialState, action) => {\n    \n    switch(action.type) {\n        \n        case actions.OPEN_MODAL:\n            return {\n                ...state,\n                isModalOpen: true\n            };\n        case actions.CLOSE_MODAL:\n            return {\n                ...state,\n                isModalOpen: false\n            };\n            \n        default: return state\n    }\n};","import {combineReducers} from \"redux\";\nimport {gameManagerReducer} from \"store/gameManagerReducer\";\nimport {userInterfaceReducer} from \"store/userInterfaceReducer\";\n\nexport const rootReducer = combineReducers({\n    gameData: gameManagerReducer,\n    userInterface: userInterfaceReducer\n})","import {createStore, applyMiddleware, compose} from 'redux';\nimport thunk from 'redux-thunk';\nimport {rootReducer} from \"store/rootReducer\";\n\n// thunk allows async use of dispatch - needed for making API calls through redux\nconst middleware = [thunk];\n// redux devtools\nconst composeEnhancers = (typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\n\nexport default function configureStore() {\n    return createStore(rootReducer, composeEnhancers(applyMiddleware(...middleware)));\n}","import React, {useEffect, useState} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport TextField from \"@material-ui/core/TextField\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport StarsIcon from '@material-ui/icons/Stars';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport Grid from \"@material-ui/core/Grid\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport {actions} from \"store/actions\";\nimport {Typography} from \"@material-ui/core\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\n\nconst useStyles = makeStyles(() => ({\n    gridItem: {\n        display: \"flex\",\n        alignItems: \"center\"\n    },\n    winnerSelectButton: {\n        margin: \".6rem\"\n    }\n}));\n\nexport const ResultReportComponent = () => {\n\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const gameData = useSelector(state => state.gameData);\n\n    const [isFormPristine, setIsFormPristine] = useState(true);\n    const [isFormValid, setIsFormValid] = useState(false);\n    const [selected, setSelected] = useState(null);\n    const [formState, setFormState] = useState({});\n\n    const handleWinnerSelect = (playerId) => {\n        setSelected((playerId === selected) ? null : playerId);\n    };\n\n    const handleFormStateChange = (playerId, points) => {\n\n        if (isFormPristine) {\n            setIsFormPristine(false);\n        }\n\n        if (points !== \"\") {\n            setFormState({\n                ...formState,\n                [playerId]: points\n            });\n        } else {\n            delete formState[playerId]\n            setFormState({...formState});\n        }\n    };\n\n    const closeModal = () => {\n        dispatch({\n            type: actions.CLOSE_MODAL\n        });\n    };\n\n    const updateSettingsAndResults = () => {\n        if (isFormValid) {\n            dispatch({\n                type: actions.UPDATE_POINTS,\n                data: {\n                    roundResults: formState\n                }\n            });\n        }\n\n        closeModal();\n    }\n\n    useEffect(() => {\n        if (Object.keys(formState).length === gameData.players.length - 1 && selected !== null) {\n            setIsFormValid(true);\n        } else {\n            setIsFormValid(false);\n        }\n    }, [formState, selected])\n\n    return (\n        <React.Fragment>\n            <Grid\n                container\n                direction=\"row\"\n                alignItems=\"center\"\n                spacing={5}\n            >\n                {gameData.players.map((playerData, key) => {\n                    return (\n                        <Grid key={key} item xs={6} classes={{root: classes.gridItem}}>\n                            <TextField\n                                type=\"number\"\n                                variant=\"filled\"\n                                label={playerData.name}\n                                InputLabelProps={{\n                                    shrink: true,\n                                }}\n                                disabled={playerData.id === selected}\n                                onBlur={(event) => {\n                                    handleFormStateChange(playerData.id, event.target.value)\n                                }}\n                            />\n                            <Tooltip title={<Typography variant={\"body2\"}>Mark as winner</Typography>}>\n                                <ToggleButton\n                                    className={classes.winnerSelectButton}\n                                    value=\"check\"\n                                    selected={selected === playerData.id}\n                                    disabled={selected !== playerData.id && selected !== null}\n                                    onChange={() => {\n                                        handleWinnerSelect(playerData.id);\n                                    }}\n                                >\n                                    <StarsIcon/>\n                                </ToggleButton>\n                            </Tooltip>\n                        </Grid>\n                    );\n                })}\n            </Grid>\n            <DialogActions>\n                {isFormValid ? <CheckCircleIcon color={\"primary\"}/> : <CancelIcon/>}\n                <Button onClick={closeModal}>\n                    Cancel\n                </Button>\n                <Button onClick={updateSettingsAndResults} disabled={!isFormValid} color=\"primary\">\n                    Save and close\n                </Button>\n            </DialogActions>\n        </React.Fragment>\n    );\n};","import React from 'react';\nimport {useSelector} from \"react-redux\";\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\nimport {ResultReportComponent} from \"material/components/modal/ResultReportComponent\";\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nexport const DataModalComponent = () => {\n    \n    const uiState = useSelector(state => state.userInterface);\n\n    return (\n        <div>\n            <Dialog\n                open={uiState.isModalOpen}\n                TransitionComponent={Transition}\n                disableBackdropClick={true}\n                aria-labelledby=\"alert-dialog-slide-title\"\n            >\n                <DialogTitle id={\"alert-dialog-slide-title\"}>Game Settings</DialogTitle>\n                <DialogContent>\n                    Settings will be here\n                </DialogContent>\n                <DialogTitle id={\"alert-dialog-slide-title\"}>Add Results</DialogTitle>\n                <DialogContent>\n                    <ResultReportComponent/>\n                </DialogContent>\n            </Dialog>\n        </div>\n    );\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport {makeStyles} from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles(() => ({\n    box: {\n        position: 'relative',\n    },\n    text: {\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)'\n\n    },\n}));\n\nexport const CircularProgressComponent = ({percent, color, points}) => {\n\n    const classes = useStyles();\n\n    return (\n        <Box className={classes.box}>\n            <CircularProgress\n                color={color}\n                variant=\"determinate\"\n                value={percent}\n                size={'10rem'}\n            />\n            <div className={classes.text}>\n                <Typography variant=\"h3\">\n                    {points}\n                </Typography>\n                <Typography variant={\"overline\"}>\n                    Points\n                </Typography>\n            </div>\n\n        </Box>\n    );\n}\n\nCircularProgressComponent.propTypes = {\n    percent: PropTypes.number.isRequired,\n    points: PropTypes.number.isRequired,\n    color: PropTypes.string\n}","import React from \"react\";\nimport Chip from \"@material-ui/core/Chip\";\nimport StarsIcon from '@material-ui/icons/Stars';\n\nexport const PointsChipComponent = ({points}) => {\n    return (\n        <React.Fragment>\n            {points !== null ? <Chip label={points}/> : <Chip color={\"primary\"} label={<StarsIcon/>}/>}\n        </React.Fragment>\n    );\n};","import React, {useState} from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport PropTypes from 'prop-types';\nimport Typography from '@material-ui/core/Typography';\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport {CircularProgressComponent} from \"material/components/CircularProgressComponent\";\nimport Grid from \"@material-ui/core/Grid\";\nimport {PointsChipComponent} from \"./PointsChipComponent\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport {actions} from \"../../store/actions\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\n\nconst useStyles = makeStyles(() => ({\n    container: {\n        padding: \"2rem\",\n        textAlign: \"center\"\n    },\n    name: {\n        marginBottom: \"1rem\"\n    },\n    deleteButton: {\n        display: \"flex\",\n        justifyContent: \"flex-end\"\n    }\n}));\n\nexport const PlayerCardComponent = ({playerData}) => {\n\n    const classes = useStyles();\n    const dispatch = useDispatch();\n\n    const currentPoints = playerData.points.reduce((a, b) => a + b, 0);\n    const pointLimit = useSelector(state => state.gameData.maxPoints);\n    const [isEditingName, setIsEditingName] = useState(false);\n\n    const removePlayer = () => {\n        dispatch({\n            type: actions.REMOVE_PLAYER,\n            data: {id: playerData.id}\n        });\n    };\n\n    const renamePlayer = (newName) => {\n        setIsEditingName(false);\n\n        if (newName !== null) dispatch({\n            type: actions.RENAME_PLAYER,\n            data: {id: playerData.id, name: newName}\n        });\n    }\n\n    return (\n        <Grid item sm={6} md={4}>\n            <Paper elevation={3}>\n                <div className={classes.container}>\n                    {isEditingName ?\n                        <TextField\n                            variant={\"standard\"}\n                            label={\"name\"}\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                            onBlur={(event) => {\n                                renamePlayer(event.target.value)\n                            }}\n                        />\n                        :\n                        <Tooltip title={<Typography variant={\"body2\"}>Click to change name</Typography>}>\n                            <Typography variant={\"h4\"} className={classes.name} onClick={() => {\n                                setIsEditingName(true);\n                            }}>\n                                {playerData.name}\n                            </Typography>\n                        </Tooltip>}\n                        <CircularProgressComponent percent={(currentPoints / pointLimit) * 100} points={currentPoints}/>\n                    {playerData.points.map((point, key) => {\n                        return (\n                        <PointsChipComponent key={key} points={point}/>\n                        )\n                    })}\n                        </div>\n                        <div className={classes.deleteButton}>\n                        <IconButton aria-label=\"delete\" className={classes.margin} onClick={removePlayer}>\n                        <DeleteIcon fontSize=\"small\"/>\n                        </IconButton>\n                        </div>\n                        </Paper>\n                        </Grid>\n                        );\n                        };\n\n                        PlayerCardComponent.propTypes = {\n                        playerData: PropTypes.object.isRequired\n                        }\n","import React, {useState} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport Grid from \"@material-ui/core/Grid\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport Fab from \"@material-ui/core/Fab\";\nimport AddIcon from '@material-ui/icons/Add';\nimport EditIcon from '@material-ui/icons/Edit';\nimport {Box, Typography} from \"@material-ui/core\";\nimport {actions} from \"store/actions\";\nimport {DataModalComponent} from \"material/components/modal/DataModalComponent\";\nimport {PlayerCardComponent} from \"material/components/PlayerCardComponent\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\n\nconst useStyles = makeStyles(() => ({\n    root: {\n        padding: \"2.5rem\"\n    },\n    fabBox: {\n        position: \"fixed\",\n        bottom: \"3rem\",\n        right: \"3rem\"\n    },\n    fabButton: {\n        margin: \".7rem\"\n    }\n}));\n\nexport const ScoreApp = () => {\n\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const gameData = useSelector(state => state.gameData);\n    const [counter, setCounter] = useState(gameData.players.length);\n\n    const addPlayer = () => {\n        dispatch({\n            type: actions.ADD_PLAYER,\n            data: {\"id\": counter, \"name\": \"New Player\", \"points\": []}\n        });\n        setCounter(counter + 1);\n    };\n\n    const openModal = () => {\n        dispatch({\n            type: actions.OPEN_MODAL\n        });\n    };\n\n    return (\n        <React.Fragment>\n            <Grid\n                container\n                classes={{root: classes.root}} // extend internal class based CSS rules\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n                spacing={5}\n            >\n                {gameData.players.map((playerData, key) => {\n                    return (\n                        <PlayerCardComponent key={key} playerData={playerData}/>\n                    );\n                })}\n            </Grid>\n            <Box className={classes.fabBox}>\n                <Tooltip title={<Typography variant={\"body2\"}>Add new player</Typography>} aria-label=\"add player\">\n                    <Fab color=\"primary\"\n                         aria-label=\"add\"\n                         classes={{root: classes.fabButton}}\n                         onClick={addPlayer}\n                    >\n\n                        <AddIcon/>\n                    </Fab>\n                </Tooltip>\n                <Tooltip title={<Typography variant={\"body2\"}>Edit results and settings</Typography>}\n                         aria-label=\"edit data\">\n                    <span>\n                    <Fab color=\"secondary\"\n                         aria-label=\"edit\"\n                         classes={{root: classes.fabButton}}\n                         disabled={gameData.players.length < 2}\n                         onClick={openModal}\n                    >\n                        <EditIcon/>\n                    </Fab>\n                    </span>\n                </Tooltip>\n            </Box>\n            <DataModalComponent/>\n        </React.Fragment>\n    )\n};\n","import React from 'react';\nimport {Provider as StoreProvider} from 'react-redux';\nimport 'App.css';\nimport configureStore from \"store/configureStore\";\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport {createMuiTheme} from \"@material-ui/core\";\nimport {ThemeProvider} from \"@material-ui/styles\";\nimport {Container} from \"semantic-ui-react\";\nimport NavigationComponent from \"./components/NavigationComponent\";\nimport {ScoreApp} from \"./material/components/ScoreApp\";\n\n\nconst store = configureStore();\n\nconst theme = createMuiTheme({\n    palette: {\n        type: 'dark',\n    },\n});\n\nfunction MaterialApp() {\n\n    return (\n        <ThemeProvider theme={theme}>\n            <CssBaseline>\n                <StoreProvider store={store}>\n                   <ScoreApp/>\n                </StoreProvider>\n            </CssBaseline>\n        </ThemeProvider>\n    );\n}\n\nfunction App() {\n    return (\n        <StoreProvider store={store}>\n            <div className=\"App\">\n                <Container>\n                    <h2 id={\"app-title\"}>UNO Score App</h2>\n                    <NavigationComponent/>\n                </Container>\n            </div>\n        </StoreProvider>\n    );\n}\n\nexport default MaterialApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n            <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}